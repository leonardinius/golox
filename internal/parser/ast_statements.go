// Code generated by tools/gen/ast. DO NOT EDIT.

package parser

import "github.com/leonardinius/golox/internal/token"

// StmtVisitor is the interface that wraps the Visit method.
type StmtVisitor interface {
	VisitStmtBlock(stmtBlock *StmtBlock) error
	VisitStmtClass(stmtClass *StmtClass) error
	VisitStmtExpression(stmtExpression *StmtExpression) error
	VisitStmtFunction(stmtFunction *StmtFunction) error
	VisitStmtIf(stmtIf *StmtIf) error
	VisitStmtPrint(stmtPrint *StmtPrint) error
	VisitStmtReturn(stmtReturn *StmtReturn) error
	VisitStmtVar(stmtVar *StmtVar) error
	VisitStmtWhile(stmtWhile *StmtWhile) error
	VisitStmtFor(stmtFor *StmtFor) error
	VisitStmtBreak(stmtBreak *StmtBreak) error
	VisitStmtContinue(stmtContinue *StmtContinue) error
}

type Stmt interface {
	Accept(v StmtVisitor) error
}

type StmtBlock struct {
	Statements []Stmt
}

var _ Stmt = (*StmtBlock)(nil)

func (e *StmtBlock) Accept(v StmtVisitor) error {
	return v.VisitStmtBlock(e)
}

type StmtClass struct {
	Name         *token.Token
	SuperClass   *ExprVariable
	Methods      []*StmtFunction
	ClassMethods []*StmtFunction
}

var _ Stmt = (*StmtClass)(nil)

func (e *StmtClass) Accept(v StmtVisitor) error {
	return v.VisitStmtClass(e)
}

type StmtExpression struct {
	Expression Expr
}

var _ Stmt = (*StmtExpression)(nil)

func (e *StmtExpression) Accept(v StmtVisitor) error {
	return v.VisitStmtExpression(e)
}

type StmtFunction struct {
	Name *token.Token
	Fn   *ExprFunction
}

var _ Stmt = (*StmtFunction)(nil)

func (e *StmtFunction) Accept(v StmtVisitor) error {
	return v.VisitStmtFunction(e)
}

type StmtIf struct {
	Condition  Expr
	ThenBranch Stmt
	ElseBranch Stmt
}

var _ Stmt = (*StmtIf)(nil)

func (e *StmtIf) Accept(v StmtVisitor) error {
	return v.VisitStmtIf(e)
}

type StmtPrint struct {
	Expression Expr
}

var _ Stmt = (*StmtPrint)(nil)

func (e *StmtPrint) Accept(v StmtVisitor) error {
	return v.VisitStmtPrint(e)
}

type StmtReturn struct {
	Keyword *token.Token
	Value   Expr
}

var _ Stmt = (*StmtReturn)(nil)

func (e *StmtReturn) Accept(v StmtVisitor) error {
	return v.VisitStmtReturn(e)
}

type StmtVar struct {
	Name        *token.Token
	Initializer Expr
}

var _ Stmt = (*StmtVar)(nil)

func (e *StmtVar) Accept(v StmtVisitor) error {
	return v.VisitStmtVar(e)
}

type StmtWhile struct {
	Condition Expr
	Body      Stmt
}

var _ Stmt = (*StmtWhile)(nil)

func (e *StmtWhile) Accept(v StmtVisitor) error {
	return v.VisitStmtWhile(e)
}

type StmtFor struct {
	Initializer Stmt
	Condition   Expr
	Increment   Expr
	Body        Stmt
}

var _ Stmt = (*StmtFor)(nil)

func (e *StmtFor) Accept(v StmtVisitor) error {
	return v.VisitStmtFor(e)
}

type StmtBreak struct {
}

var _ Stmt = (*StmtBreak)(nil)

func (e *StmtBreak) Accept(v StmtVisitor) error {
	return v.VisitStmtBreak(e)
}

type StmtContinue struct {
}

var _ Stmt = (*StmtContinue)(nil)

func (e *StmtContinue) Accept(v StmtVisitor) error {
	return v.VisitStmtContinue(e)
}
