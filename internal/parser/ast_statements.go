// Code generated by tools/gen/ast. DO NOT EDIT.

package parser

import "context"
import "github.com/leonardinius/golox/internal/token"

// StmtVisitor is the interface that wraps the Visit method.
type StmtVisitor interface {
	VisitStmtBlock(ctx context.Context, stmtBlock *StmtBlock) (any, error)
	VisitStmtClass(ctx context.Context, stmtClass *StmtClass) (any, error)
	VisitStmtExpression(ctx context.Context, stmtExpression *StmtExpression) (any, error)
	VisitStmtFunction(ctx context.Context, stmtFunction *StmtFunction) (any, error)
	VisitStmtIf(ctx context.Context, stmtIf *StmtIf) (any, error)
	VisitStmtPrint(ctx context.Context, stmtPrint *StmtPrint) (any, error)
	VisitStmtReturn(ctx context.Context, stmtReturn *StmtReturn) (any, error)
	VisitStmtVar(ctx context.Context, stmtVar *StmtVar) (any, error)
	VisitStmtWhile(ctx context.Context, stmtWhile *StmtWhile) (any, error)
	VisitStmtFor(ctx context.Context, stmtFor *StmtFor) (any, error)
	VisitStmtBreak(ctx context.Context, stmtBreak *StmtBreak) (any, error)
	VisitStmtContinue(ctx context.Context, stmtContinue *StmtContinue) (any, error)
}

type Stmt interface {
	Accept(ctx context.Context, v StmtVisitor) (any, error)
}

type StmtBlock struct {
	Statements []Stmt
}

var _ Stmt = (*StmtBlock)(nil)

func (e *StmtBlock) Accept(ctx context.Context, v StmtVisitor) (any, error) {
	return v.VisitStmtBlock(ctx, e)
}

type StmtClass struct {
	Name         *token.Token
	Methods      []*StmtFunction
	ClassMethods []*StmtFunction
}

var _ Stmt = (*StmtClass)(nil)

func (e *StmtClass) Accept(ctx context.Context, v StmtVisitor) (any, error) {
	return v.VisitStmtClass(ctx, e)
}

type StmtExpression struct {
	Expression Expr
}

var _ Stmt = (*StmtExpression)(nil)

func (e *StmtExpression) Accept(ctx context.Context, v StmtVisitor) (any, error) {
	return v.VisitStmtExpression(ctx, e)
}

type StmtFunction struct {
	Name *token.Token
	Fn   *ExprFunction
}

var _ Stmt = (*StmtFunction)(nil)

func (e *StmtFunction) Accept(ctx context.Context, v StmtVisitor) (any, error) {
	return v.VisitStmtFunction(ctx, e)
}

type StmtIf struct {
	Condition  Expr
	ThenBranch Stmt
	ElseBranch Stmt
}

var _ Stmt = (*StmtIf)(nil)

func (e *StmtIf) Accept(ctx context.Context, v StmtVisitor) (any, error) {
	return v.VisitStmtIf(ctx, e)
}

type StmtPrint struct {
	Expression Expr
}

var _ Stmt = (*StmtPrint)(nil)

func (e *StmtPrint) Accept(ctx context.Context, v StmtVisitor) (any, error) {
	return v.VisitStmtPrint(ctx, e)
}

type StmtReturn struct {
	Keyword *token.Token
	Value   Expr
}

var _ Stmt = (*StmtReturn)(nil)

func (e *StmtReturn) Accept(ctx context.Context, v StmtVisitor) (any, error) {
	return v.VisitStmtReturn(ctx, e)
}

type StmtVar struct {
	Name        *token.Token
	Initializer Expr
}

var _ Stmt = (*StmtVar)(nil)

func (e *StmtVar) Accept(ctx context.Context, v StmtVisitor) (any, error) {
	return v.VisitStmtVar(ctx, e)
}

type StmtWhile struct {
	Condition Expr
	Body      Stmt
}

var _ Stmt = (*StmtWhile)(nil)

func (e *StmtWhile) Accept(ctx context.Context, v StmtVisitor) (any, error) {
	return v.VisitStmtWhile(ctx, e)
}

type StmtFor struct {
	Initializer Stmt
	Condition   Expr
	Increment   Expr
	Body        Stmt
}

var _ Stmt = (*StmtFor)(nil)

func (e *StmtFor) Accept(ctx context.Context, v StmtVisitor) (any, error) {
	return v.VisitStmtFor(ctx, e)
}

type StmtBreak struct {
}

var _ Stmt = (*StmtBreak)(nil)

func (e *StmtBreak) Accept(ctx context.Context, v StmtVisitor) (any, error) {
	return v.VisitStmtBreak(ctx, e)
}

type StmtContinue struct {
}

var _ Stmt = (*StmtContinue)(nil)

func (e *StmtContinue) Accept(ctx context.Context, v StmtVisitor) (any, error) {
	return v.VisitStmtContinue(ctx, e)
}
