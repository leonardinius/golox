// Code generated by tools/gen/ast. DO NOT EDIT.

package parser

import "github.com/leonardinius/golox/internal/token"

// ExprVisitor is the interface that wraps the Visit method.
type ExprVisitor interface {
	VisitBinary(binary *Binary) (any, error)
	VisitGrouping(grouping *Grouping) (any, error)
	VisitLiteral(literal *Literal) (any, error)
	VisitUnary(unary *Unary) (any, error)
	VisitVariable(variable *Variable) (any, error)
}

type Expr interface {
	Accept(v ExprVisitor) (any, error)
}

type Binary struct {
	Left     Expr
	Operator *token.Token
	Right    Expr
}

var _ Expr = (*Binary)(nil)

func (e *Binary) Accept(v ExprVisitor) (any, error) {
	return v.VisitBinary(e)
}

type Grouping struct {
	Expression Expr
}

var _ Expr = (*Grouping)(nil)

func (e *Grouping) Accept(v ExprVisitor) (any, error) {
	return v.VisitGrouping(e)
}

type Literal struct {
	Value any
}

var _ Expr = (*Literal)(nil)

func (e *Literal) Accept(v ExprVisitor) (any, error) {
	return v.VisitLiteral(e)
}

type Unary struct {
	Operator *token.Token
	Right    Expr
}

var _ Expr = (*Unary)(nil)

func (e *Unary) Accept(v ExprVisitor) (any, error) {
	return v.VisitUnary(e)
}

type Variable struct {
	Name *token.Token
}

var _ Expr = (*Variable)(nil)

func (e *Variable) Accept(v ExprVisitor) (any, error) {
	return v.VisitVariable(e)
}
