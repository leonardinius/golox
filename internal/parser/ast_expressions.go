// Code generated by tools/gen/ast. DO NOT EDIT.

package parser

import "context"
import "github.com/leonardinius/golox/internal/token"

// ExprVisitor is the interface that wraps the Visit method.
type ExprVisitor interface {
	VisitExprAssign(ctx context.Context, exprAssign *ExprAssign) (any, error)
	VisitExprBinary(ctx context.Context, exprBinary *ExprBinary) (any, error)
	VisitExprGrouping(ctx context.Context, exprGrouping *ExprGrouping) (any, error)
	VisitExprLiteral(ctx context.Context, exprLiteral *ExprLiteral) (any, error)
	VisitExprLogical(ctx context.Context, exprLogical *ExprLogical) (any, error)
	VisitExprUnary(ctx context.Context, exprUnary *ExprUnary) (any, error)
	VisitExprVariable(ctx context.Context, exprVariable *ExprVariable) (any, error)
}

type Expr interface {
	Accept(ctx context.Context, v ExprVisitor) (any, error)
}

type ExprAssign struct {
	Name  *token.Token
	Value Expr
}

var _ Expr = (*ExprAssign)(nil)

func (e *ExprAssign) Accept(ctx context.Context, v ExprVisitor) (any, error) {
	return v.VisitExprAssign(ctx, e)
}

type ExprBinary struct {
	Left     Expr
	Operator *token.Token
	Right    Expr
}

var _ Expr = (*ExprBinary)(nil)

func (e *ExprBinary) Accept(ctx context.Context, v ExprVisitor) (any, error) {
	return v.VisitExprBinary(ctx, e)
}

type ExprGrouping struct {
	Expression Expr
}

var _ Expr = (*ExprGrouping)(nil)

func (e *ExprGrouping) Accept(ctx context.Context, v ExprVisitor) (any, error) {
	return v.VisitExprGrouping(ctx, e)
}

type ExprLiteral struct {
	Value any
}

var _ Expr = (*ExprLiteral)(nil)

func (e *ExprLiteral) Accept(ctx context.Context, v ExprVisitor) (any, error) {
	return v.VisitExprLiteral(ctx, e)
}

type ExprLogical struct {
	Left     Expr
	Operator *token.Token
	Right    Expr
}

var _ Expr = (*ExprLogical)(nil)

func (e *ExprLogical) Accept(ctx context.Context, v ExprVisitor) (any, error) {
	return v.VisitExprLogical(ctx, e)
}

type ExprUnary struct {
	Operator *token.Token
	Right    Expr
}

var _ Expr = (*ExprUnary)(nil)

func (e *ExprUnary) Accept(ctx context.Context, v ExprVisitor) (any, error) {
	return v.VisitExprUnary(ctx, e)
}

type ExprVariable struct {
	Name *token.Token
}

var _ Expr = (*ExprVariable)(nil)

func (e *ExprVariable) Accept(ctx context.Context, v ExprVisitor) (any, error) {
	return v.VisitExprVariable(ctx, e)
}
