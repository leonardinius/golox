// Code generated by tools/gen/ast. DO NOT EDIT.

package parser

import "github.com/leonardinius/golox/internal/token"

// ExprVisitor is the interface that wraps the Visit method.
type ExprVisitor interface {
	VisitExprBinary(binary *ExprBinary) (any, error)
	VisitExprGrouping(grouping *ExprGrouping) (any, error)
	VisitExprLiteral(literal *ExprLiteral) (any, error)
	VisitExprUnary(unary *ExprUnary) (any, error)
	VisitExprVariable(variable *ExprVariable) (any, error)
}

type Expr interface {
	Accept(v ExprVisitor) (any, error)
}

type ExprBinary struct {
	Left     Expr
	Operator *token.Token
	Right    Expr
}

var _ Expr = (*ExprBinary)(nil)

func (e *ExprBinary) Accept(v ExprVisitor) (any, error) {
	return v.VisitExprBinary(e)
}

type ExprGrouping struct {
	Expression Expr
}

var _ Expr = (*ExprGrouping)(nil)

func (e *ExprGrouping) Accept(v ExprVisitor) (any, error) {
	return v.VisitExprGrouping(e)
}

type ExprLiteral struct {
	Value any
}

var _ Expr = (*ExprLiteral)(nil)

func (e *ExprLiteral) Accept(v ExprVisitor) (any, error) {
	return v.VisitExprLiteral(e)
}

type ExprUnary struct {
	Operator *token.Token
	Right    Expr
}

var _ Expr = (*ExprUnary)(nil)

func (e *ExprUnary) Accept(v ExprVisitor) (any, error) {
	return v.VisitExprUnary(e)
}

type ExprVariable struct {
	Name *token.Token
}

var _ Expr = (*ExprVariable)(nil)

func (e *ExprVariable) Accept(v ExprVisitor) (any, error) {
	return v.VisitExprVariable(e)
}
