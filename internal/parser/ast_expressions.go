// Code generated by tools/gen/ast. DO NOT EDIT.

package parser

import "github.com/leonardinius/golox/internal/token"

// ExprVisitor is the interface that wraps the Visit method.
type ExprVisitor interface {
	VisitExprAssign(exprAssign *ExprAssign) (any, error)
	VisitExprBinary(exprBinary *ExprBinary) (any, error)
	VisitExprCall(exprCall *ExprCall) (any, error)
	VisitExprFunction(exprFunction *ExprFunction) (any, error)
	VisitExprGet(exprGet *ExprGet) (any, error)
	VisitExprGrouping(exprGrouping *ExprGrouping) (any, error)
	VisitExprLiteral(exprLiteral *ExprLiteral) (any, error)
	VisitExprLogical(exprLogical *ExprLogical) (any, error)
	VisitExprSet(exprSet *ExprSet) (any, error)
	VisitExprSuper(exprSuper *ExprSuper) (any, error)
	VisitExprThis(exprThis *ExprThis) (any, error)
	VisitExprUnary(exprUnary *ExprUnary) (any, error)
	VisitExprVariable(exprVariable *ExprVariable) (any, error)
}

type Expr interface {
	Accept(v ExprVisitor) (any, error)
}

type ExprAssign struct {
	Name  *token.Token
	Value Expr
}

var _ Expr = (*ExprAssign)(nil)

func (e *ExprAssign) Accept(v ExprVisitor) (any, error) {
	return v.VisitExprAssign(e)
}

type ExprBinary struct {
	Left     Expr
	Operator *token.Token
	Right    Expr
}

var _ Expr = (*ExprBinary)(nil)

func (e *ExprBinary) Accept(v ExprVisitor) (any, error) {
	return v.VisitExprBinary(e)
}

type ExprCall struct {
	Callee     Expr
	CloseParen *token.Token
	Arguments  []Expr
}

var _ Expr = (*ExprCall)(nil)

func (e *ExprCall) Accept(v ExprVisitor) (any, error) {
	return v.VisitExprCall(e)
}

type ExprFunction struct {
	Parameters []*token.Token
	Body       []Stmt
}

var _ Expr = (*ExprFunction)(nil)

func (e *ExprFunction) Accept(v ExprVisitor) (any, error) {
	return v.VisitExprFunction(e)
}

type ExprGet struct {
	Instance Expr
	Name     *token.Token
}

var _ Expr = (*ExprGet)(nil)

func (e *ExprGet) Accept(v ExprVisitor) (any, error) {
	return v.VisitExprGet(e)
}

type ExprGrouping struct {
	Expression Expr
}

var _ Expr = (*ExprGrouping)(nil)

func (e *ExprGrouping) Accept(v ExprVisitor) (any, error) {
	return v.VisitExprGrouping(e)
}

type ExprLiteral struct {
	Value any
}

var _ Expr = (*ExprLiteral)(nil)

func (e *ExprLiteral) Accept(v ExprVisitor) (any, error) {
	return v.VisitExprLiteral(e)
}

type ExprLogical struct {
	Left     Expr
	Operator *token.Token
	Right    Expr
}

var _ Expr = (*ExprLogical)(nil)

func (e *ExprLogical) Accept(v ExprVisitor) (any, error) {
	return v.VisitExprLogical(e)
}

type ExprSet struct {
	Instance Expr
	Name     *token.Token
	Value    Expr
}

var _ Expr = (*ExprSet)(nil)

func (e *ExprSet) Accept(v ExprVisitor) (any, error) {
	return v.VisitExprSet(e)
}

type ExprSuper struct {
	Keyword *token.Token
	Method  *token.Token
}

var _ Expr = (*ExprSuper)(nil)

func (e *ExprSuper) Accept(v ExprVisitor) (any, error) {
	return v.VisitExprSuper(e)
}

type ExprThis struct {
	Keyword *token.Token
}

var _ Expr = (*ExprThis)(nil)

func (e *ExprThis) Accept(v ExprVisitor) (any, error) {
	return v.VisitExprThis(e)
}

type ExprUnary struct {
	Operator *token.Token
	Right    Expr
}

var _ Expr = (*ExprUnary)(nil)

func (e *ExprUnary) Accept(v ExprVisitor) (any, error) {
	return v.VisitExprUnary(e)
}

type ExprVariable struct {
	Name *token.Token
}

var _ Expr = (*ExprVariable)(nil)

func (e *ExprVariable) Accept(v ExprVisitor) (any, error) {
	return v.VisitExprVariable(e)
}
